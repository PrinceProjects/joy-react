{"version":3,"sources":["assets/images/b1.png","components/Navbar/SideNav.js","components/Navbar/Burger.js","components/Navbar/TopNav.js","components/Navbar/Navbar.js","components/Home.js","components/Favorites.js","components/Read/Joke.js","components/Read/Options.js","components/Read.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideNav","props","open","document","body","style","backgroundColor","className","to","Burger","React","useState","setOpen","onClick","TopNav","Navbar","sectionStyle","zIndex","overflow","backgroundImage","Bkm","backgroundPosition","backgroundSize","backgroundRepeat","opacity","Home","Favorites","Joke","jokes","setup","delivery","Options","setCount","count","Read","setJokes","useEffect","a","axios","get","resp","data","fetchData","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,gC,wLC0B5BC,EAvBC,SAACC,GAChB,OAAKA,EAAMC,MAIPD,EAAMC,OAETC,SAASC,KAAKC,MAAMC,gBAAkB,mBAKtC,yBAAKC,UAAU,YACd,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,UACA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,SAA9B,QACA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,cAA9B,kBAbDL,SAASC,KAAKC,MAAMC,gBAAkB,sBAC/B,OCcMG,EAjBA,WAAO,IAAD,EACIC,IAAMC,UAAS,GADnB,mBACbT,EADa,KACPU,EADO,KAGpB,OACC,oCACC,yBAAKL,UAAU,cAAcM,QAAS,kBAAMD,GAASV,KACjD,+BACA,+BACA,gCAEJ,kBAAC,EAAD,CAASA,KAAMA,MCLHY,EANA,kBACd,yBAAKP,UAAU,WACd,0BAAMA,UAAU,QAAhB,iBCUaQ,MAVf,WAEG,OACC,yBAAKR,UAAU,UACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,QCNFS,EAAe,CACjBC,OAAQ,IACRC,SAAU,SACVC,gBAAgB,OAAD,O,OAASC,EAAT,KACfC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,YAClBC,QAAS,OAoBIC,MAjBf,WACE,OACC,yBAAKpB,MAAQW,GACZ,yBAAKT,UAAU,QACd,yBAAKA,UAAU,aACZ,wBAAIA,UAAU,gBAAd,WACE,uBAAGA,UAAU,gBAAb,4CACE,6BADF,4CAEE,6BAAK,6BAFP,0CAIA,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,SAA/B,YCbKkB,MARf,WACE,OACE,yBAAKnB,UAAU,aACb,gD,0CCSSoB,EAXF,SAAC1B,GACb,OAEC,yBAAKM,UAAU,kBACd,yBAAKA,UAAU,SAAf,YAAiCN,EAAM2B,MAAMC,OAC7C,6BACA,yBAAKtB,UAAU,YAAf,eAAuCN,EAAM2B,MAAME,YCEvCC,EATC,SAAC9B,GAEhB,OACC,yBAAKM,UAAU,WACd,4BAAQA,UAAU,WAAWM,QAAS,kBAAMZ,EAAM+B,SAAS/B,EAAMgC,MAAQ,KAAzE,UCwBYC,MAvBf,WAAiB,IAAD,EAESvB,mBAAS,IAFlB,mBAEViB,EAFU,KAEHO,EAFG,OAGSxB,mBAAS,GAHlB,mBAGVsB,EAHU,KAGHD,EAHG,KAeb,OAVFI,qBAAU,YACM,uCAAG,8BAAAC,EAAA,sEACEC,IAAMC,IAAI,sDADZ,cACXC,EADW,gBAEGA,EAAKC,KAFR,OAEXb,EAFW,OAGjBO,EAASP,GAHQ,2CAAH,qDAKfc,KACC,CAACT,IAIC,yBAAK1B,UAAU,aACd,kBAAC,EAAD,CAAMqB,MAAOA,IACb,kBAAC,EAAD,CAASK,MAAOA,EAAOD,SAAUA,M,MCDxBW,MAff,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWpB,EAAMqB,OAAK,IACtC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWX,IAC/B,kBAAC,IAAD,CAAOU,KAAK,aAAaC,UAAWnB,QCL1BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnD,SAASoD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.453cb77e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/b1.b0849a61.png\";","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nconst SideNav = (props) => {\n\tif (!props.open){\n\t\tdocument.body.style.backgroundColor = \"rgba(251,251,251,1)\";\n\t\treturn null;\n\t}\n\tif (props.open){\n\t\t// document.body\n\t\tdocument.body.style.backgroundColor = \"rgba(0,0,0,0.2)\";\n\n\t}\n\n\treturn(\n\t\t<div className=\"side-nav\">\n\t\t\t<Link className=\"nav-link\" to=\"/\"> Home </Link>\n\t\t\t<Link className=\"nav-link\" to=\"/read\">Read</Link>\n\t\t\t<Link className=\"nav-link\" to=\"/favorites\"> Favorites </Link>\n\t\t</div>\n\n\t)\n}\n\t\n\t\n\nexport default SideNav;","import React from 'react';\nimport SideNav from './SideNav';\n\nconst Burger = () => {\n\tconst [open, setOpen] = React.useState(false);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"burger-icon\" onClick={() => setOpen(!open)}>\n\t\t    \t<span></span>\n\t\t    \t<span></span>\n\t\t    \t<span></span>\n\t\t\t</div>\n\t\t\t<SideNav open={open}/>\n\t\t</>\n\t)\n}\n\t\n\n\nexport default Burger;","import React from 'react';\n\nconst TopNav = () => (\n\t<div className=\"top-nav\">\n\t\t<span className=\"lead\">JOKE READER</span>\n\t</div>\n);\n\nexport default TopNav;","import React from 'react';\nimport Burger from './Burger';\nimport TopNav from './TopNav';\n\nfunction Navbar() {\n\n  \treturn (\n\t  \t<div className=\"header\">\n\t\t    <Burger/>\n\t\t    <TopNav/>\n\t    </div>\n  \t);\n}\n\nexport default Navbar;","import React from 'react';\nimport Bkm from '../assets/images/b1.png';\nimport {Link} from 'react-router-dom';\nvar sectionStyle = {\n  zIndex: \"1\",\n  overflow: \"hidden\",\n  backgroundImage: `url(${Bkm})`,\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  opacity: \"0.7\",\n};\n\nfunction Home() {\n  return (\n  \t<div style={ sectionStyle }>\n  \t\t<div className=\"home\">\n\t    <div className=\"container\">\n\t      \t<h1 className=\"main-heading\">Welcome</h1>\n          <p className=\"home-content\">Are you bored and want to get refreshed ?\n            <br/> Or, just want to read some funny jokes ?\n            <br/><br/> Then you have come at the right place\n          </p> \n          <Link className=\"read-link\" to=\"/read\">Read</Link>\n\t    </div>\n\t    </div>\n    </div>\n  );\n}\n\nexport default Home;\n\n","import React from 'react';\n\nfunction Favorites() {\n  return (\n    <div className=\"container\">\n      <h1>Your favorites</h1>\n    </div>\n  );\n}\n\nexport default Favorites;\n","import React from 'react';\nimport axios from 'axios';\n\nconst Joke = (props) => {\n\treturn(\n\n\t\t<div className=\"joke-container\">\n\t\t\t<div className=\"setup\"> Setup : {props.jokes.setup}</div>\n\t\t\t<br/>\n\t\t\t<div className=\"delivery\"> Delivery : {props.jokes.delivery}</div>\n\t\t</div>\n\t)\n}\n\nexport default Joke;\n","import React from 'react';\n\nconst Options = (props) => {\n\n\treturn(\n\t\t<div className=\"options\">\n\t\t\t<button className=\"next-btn\" onClick={() => props.setCount(props.count + 1)}>Next</button>\n\t\t</div>\n\t)\n}\n\nexport default Options;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Joke from './Read/Joke';\nimport Options from './Read/Options';\n\n\n\nfunction Read() {\n\n\tlet [jokes, setJokes] = useState([]);\n\tlet [count, setCount] = useState(0);\n\t\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\tconst resp = await axios.get('https://sv443.net/jokeapi/v2/joke/Any?type=twopart')\n\t\t\tconst jokes = await resp.data;\n\t\t\tsetJokes(jokes);\t\t\n\t\t};\n\t\tfetchData();\n\t},[count]);\n\t\n\t\n  \treturn (\n\t    <div className=\"container\">\t    \t\t    \t\n\t    \t<Joke jokes={jokes}/>\t    \t\n\t    \t<Options count={count} setCount={setCount}/>\n\t    </div>\n  \t);\n}\n\nexport default Read;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Home from './components/Home';\nimport Favorites from './components/Favorites';\nimport Read from './components/Read';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Navbar/>\n        <Switch>\n          <Route path=\"/\" component={Home} exact/>\n          <Route path=\"/read\" component={Read} />\n          <Route path=\"/favorites\" component={Favorites} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}